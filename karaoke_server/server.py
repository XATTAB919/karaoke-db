
from flask import Flask, request, jsonify           # Flask ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API
from flask_cors import CORS                         # CORS ‚Äî —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ Kivy) –º–æ–≥–ª–æ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã
import psycopg2                                     # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
import bcrypt                                       # –î–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
import secrets                                      # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
import datetime                                     # –î–ª—è —Ä–∞—Å—á—ë—Ç–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è PRO-–¥–æ—Å—Ç—É–ø–∞
import os                                     # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, .env)

# --- –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤


db_config = {
    "host": "dpg-d1f729ali9vc739mck2g-a",
    "database": "karaoke_h7ks",
    "user": "karaoke_h7ks_user",
    "password": "KHWlivhitgGDwPjptwwQuMJzYXEuB9ZI",
    "port": 5432
}

# --- –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (—Ç–≤–æ—è –±–∞–∑–∞ –Ω–∞ Render) ---
DB_HOST = "dpg-d1f729ali9vc739mck2g-a"
DB_NAME = "karaoke_h7ks"
DB_USER = "karaoke_h7ks_user"
DB_PASS = "KHWlivhitgGDwPjptwwQuMJzYXEuB9ZI"
DB_PORT = 5432

### –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
@app.route('/')
def home():
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"


# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
def get_connection():
    return psycopg2.connect(
        host=DB_HOST, dbname=DB_NAME, user=DB_USER, password=DB_PASS, port=DB_PORT
    )

# --- –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç) ---
def create_table():
    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,               -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                name TEXT NOT NULL,                  -- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                email TEXT UNIQUE NOT NULL,          -- Email (—É–Ω–∏–∫–∞–ª–µ–Ω)
                password TEXT NOT NULL,              -- –ü–∞—Ä–æ–ª—å (–≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ)
                token TEXT,                          -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                pro_expires TIMESTAMP                -- –î–æ –∫–∞–∫–æ–π –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–Ω–∞ PRO-–≤–µ—Ä—Å–∏—è
            );
            """)
            conn.commit()

# --- –í—ã–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞ ---
create_table()

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–¥–ª—è –≤—Ö–æ–¥–∞) ---
def generate_token():
    return secrets.token_hex(16)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 32-—Å–∏–º–≤–æ–ª—å–Ω—ã–π hex-–∫–æ–¥

# =============================
# üìå –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================
@app.route("/register", methods=["POST"])
def register():
    data = request.get_json()                     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (JSON)
    name = data.get("name")                       # –ü–æ–ª—É—á–∞–µ–º –∏–º—è
    email = data.get("email")                     # –ü–æ–ª—É—á–∞–µ–º email
    password = data.get("password")               # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–æ–ª—å

    if not all([name, email, password]):
        return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, email –∏ –ø–∞—Ä–æ–ª—å"}), 400

    # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    hashed_pw = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")
    token = generate_token()  # –°–æ–∑–¥–∞—ë–º —Ç–æ–∫–µ–Ω
    pro_expires = datetime.datetime.utcnow() + datetime.timedelta(days=3)  # –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ 3 –¥–Ω—è

    try:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO users (name, email, password, token, pro_expires)
                    VALUES (%s, %s, %s, %s, %s)
                    RETURNING name, token, pro_expires;
                """, (name, email, hashed_pw, token, pro_expires))
                user = cur.fetchone()
                conn.commit()
                return jsonify({
                    "name": user[0],
                    "token": user[1],
                    "pro_expires": user[2].isoformat()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è PRO
                }), 201
    except psycopg2.errors.UniqueViolation:
        return jsonify({"error": "Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"}), 409

# =============================
# üìå –í–•–û–î –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# =============================
@app.route("/login", methods=["POST"])
def login():
    data = request.get_json()
    email = data.get("email")
    password = data.get("password")

    if not all([email, password]):
        return jsonify({"error": "–í–≤–µ–¥–∏—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å"}), 400

    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT id, name, password, token, pro_expires FROM users WHERE email = %s", (email,))
            user = cur.fetchone()
            if not user:
                return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

            hashed_pw = user[2]
            if not bcrypt.checkpw(password.encode("utf-8"), hashed_pw.encode("utf-8")):
                return jsonify({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å"}), 401

            return jsonify({
                "name": user[1],
                "token": user[3],
                "pro_expires": user[4].isoformat()
            })

# =============================
# üìå –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ü–û –¢–û–ö–ï–ù–£
# =============================
@app.route("/status", methods=["GET"])
def status():
    token = request.args.get("token")
    if not token:
        return jsonify({"error": "Token –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω"}), 400

    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT name, pro_expires FROM users WHERE token = %s", (token,))
            user = cur.fetchone()
            if not user:
                return jsonify({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

            return jsonify({
                "name": user[0],
                "pro_expires": user[1].isoformat()
            })


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@app.route("/users", methods=["GET"])  # —Å–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç /users –¥–ª—è GET-–∑–∞–ø—Ä–æ—Å–∞
def get_all_users():
    try:
        with get_connection() as conn:  # –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
            with conn.cursor() as cur:  # —Å–æ–∑–¥–∞—ë–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
                cur.execute("SELECT id, name, email, pro_expires FROM users")  # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                rows = cur.fetchall()  # –∑–∞–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

                users = []  # —Å–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                for row in rows:  # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ
                    users.append({
                        "id": row[0],  # id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                        "name": row[1],  # –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        "email": row[2],  # email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        "pro_expires": row[3].isoformat() if row[3] else None  # —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è PRO, –µ—Å–ª–∏ –µ—Å—Ç—å
                    })

                return jsonify(users)  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–∫ JSON
    except Exception as e:  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        return jsonify({"error": str(e)}), 500  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)  # –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø